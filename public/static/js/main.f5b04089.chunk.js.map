{"version":3,"sources":["containers/board/boardSlice.js","components/BoardWrapper/index.js","components/Tile/index.js","components/Tiles/index.js","containers/board/Board.js","App.js","store.js","serviceWorker.js","index.js"],"names":["initState","playCard","board","boardUrl","isSubmitting","submitResponse","submitError","boardSlice","createSlice","name","initialState","reducers","setBoardValue","state","action","payload","setNewGame","putMoveStarted","setSubmitResponse","location","setSubmitError","actions","selectBoard","selectBoardUrl","selectPlayCard","selectSubmitResponse","selectSubmitError","selectSubmitting","getNewGame","createAsyncThunk","args","thunkAPI","a","dispatch","axios","get","then","res","data","catch","err","message","putMoveToApi","method","url","newBoard","BoardWrapper","props","className","children","Tile","clickable","figure","onClick","e","preventDefault","placeMove","tileKey","Tiles","Fragment","split","map","i","Board","useSelector","submitting","isGameFinished","status","X_WON","O_WON","DRAW","ERROR","useDispatch","tileIndex","forEach","v","aria-label","App","configureStore","reducer","boardReducer","middleware","thunkMiddleware","Boolean","window","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5b04089.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const initState = {\n  playCard: \"X\",\n  board: \"---------\",\n  boardUrl: null,\n  isSubmitting: false,\n  submitResponse: null,\n  submitError: null,\n};\n\nexport const boardSlice = createSlice({\n  name: \"board\",\n  initialState: initState,\n  reducers: {\n    setBoardValue: (state, action) => {\n      state.board = action.payload;\n    },\n    setNewGame: (state) => {\n      state.board = initState.board;\n      state.playCard = initState.playCard;\n      state.boardUrl = initState.boardUrl;\n      state.submitResponse = initState.submitResponse;\n      state.submitError = initState.submitError;\n      state.isSubmitting = initState.isSubmitting;\n    },\n    putMoveStarted: (state) => {\n      state.isSubmitting = true;\n    },\n    setSubmitResponse: (state, action) => {\n      state.submitResponse = action.payload;\n      state.isSubmitting = false;\n      if (action.payload && typeof action.payload.location !== \"undefined\") {\n        state.boardUrl = action.payload.location;\n      }\n      if (action.payload && typeof action.payload.board !== \"undefined\") {\n        state.board = action.payload.board;\n      }\n    },\n    setSubmitError: (state, action) => {\n      state.submitError = action.payload;\n      state.isSubmitting = false;\n    },\n  },\n});\n\nexport const { setBoardValue, setNewGame } = boardSlice.actions;\n\nexport const selectBoard = (state) => state.board;\nexport const selectBoardUrl = (state) => state.board.boardUrl;\nexport const selectPlayCard = (state) => state.board.playCard;\nexport const selectSubmitResponse = (state) => state.board.submitResponse;\nexport const selectSubmitError = (state) => state.board.submitError;\nexport const selectSubmitting = (state) => state.board.isSubmitting;\n\nexport const getNewGame = createAsyncThunk(\n  \"board/getNewGame\",\n  async (args, thunkAPI) => {\n    thunkAPI.dispatch(boardSlice.actions.putMoveStarted());\n\n    axios\n      .get(args.location)\n      .then((res) => {\n        thunkAPI.dispatch(boardSlice.actions.setSubmitResponse(res.data));\n      })\n      .catch((err) => {\n        thunkAPI.dispatch(boardSlice.actions.setSubmitError(err.message));\n      });\n  }\n);\n\nexport const putMoveToApi = createAsyncThunk(\n  \"board/putMoveToApi\",\n  async (args, thunkAPI) => {\n    const method = args.boardUrl ? \"put\" : \"post\";\n    const url = args.boardUrl || `/api/v1/games`;\n    const board = args.newBoard;\n\n    thunkAPI.dispatch(boardSlice.actions.putMoveStarted());\n\n    axios[method](url, {\n      board,\n    })\n      .then((res) => {\n        thunkAPI.dispatch(boardSlice.actions.setSubmitResponse(res.data));\n        if (res.data && typeof res.data.location != \"undefined\") {\n          thunkAPI.dispatch(getNewGame({ location: res.data.location }));\n        }\n      })\n      .catch((err) => {\n        thunkAPI.dispatch(boardSlice.actions.setSubmitError(err.message));\n      });\n  }\n);\n\nexport default boardSlice.reducer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./css.css\";\n\nfunction BoardWrapper(props) {\n  return <div className=\"Board-wrapper\">{props.children}</div>;\n}\n\nBoardWrapper.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default BoardWrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./css.css\";\n\nfunction Tile(props) {\n  const clickable = props.figure === \"-\";\n  const figure = clickable ? props.playCard : props.figure;\n  const click = (e) => {\n    e.preventDefault();\n    if (clickable) {\n      props.placeMove(props.tileKey);\n    }\n  };\n  return (\n    <div onClick={click} className={clickable ? \"Tile Tile-clickable\" : \"Tile\"}>\n      {figure}\n    </div>\n  );\n}\n\nTile.propTypes = {\n  figure: PropTypes.string,\n  placeMove: PropTypes.func,\n  tileKey: PropTypes.number,\n  playCard: PropTypes.string,\n};\n\nexport default Tile;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Tile from \"../Tile\";\n\nfunction Tiles(props) {\n  return (\n    <React.Fragment>\n      {props.board.board.split(\"\").map((figure, i) => {\n        return (\n          <Tile\n            key={i}\n            tileKey={i}\n            placeMove={props.placeMove}\n            figure={figure}\n            playCard={props.board.playCard}\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n}\n\nTiles.propTypes = {\n  board: PropTypes.object,\n  figure: PropTypes.string,\n  placeMove: PropTypes.func,\n  tileKey: PropTypes.number,\n  playCard: PropTypes.string,\n};\n\nexport default Tiles;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  setBoardValue,\n  selectBoard,\n  selectBoardUrl,\n  selectPlayCard,\n  selectSubmitResponse,\n  selectSubmitError,\n  selectSubmitting,\n  setNewGame,\n  putMoveToApi,\n} from \"./boardSlice\";\nimport \"./css.css\";\nimport BoardWrapper from \"../../components/BoardWrapper\";\nimport Tiles from \"../../components/Tiles\";\n\nexport function Board() {\n  const playCard = useSelector(selectPlayCard);\n  const board = useSelector(selectBoard);\n  const boardUrl = useSelector(selectBoardUrl);\n  const submitResponse = useSelector(selectSubmitResponse);\n  const submitError = useSelector(selectSubmitError);\n  const submitting = useSelector(selectSubmitting);\n  const isGameFinished = submitResponse && submitResponse.status !== \"RUNNING\";\n  const X_WON = isGameFinished && submitResponse.status === \"X_WON\";\n  const O_WON = isGameFinished && submitResponse.status === \"O_WON\";\n  const DRAW = isGameFinished && submitResponse.status === \"DRAW\";\n  const ERROR = submitError;\n  const dispatch = useDispatch();\n\n  const newGame = () => {\n    dispatch(setNewGame());\n  };\n\n  const placeMove = (tileIndex) => {\n    if (isGameFinished || submitting) {\n      return false;\n    }\n    let newBoard = \"\";\n    board.board.split(\"\").forEach((v, i) => {\n      if (i === tileIndex) {\n        newBoard += playCard;\n      } else {\n        newBoard += v;\n      }\n    });\n    dispatch(setBoardValue(newBoard));\n    dispatch(putMoveToApi({ newBoard, boardUrl }));\n  };\n\n  return (\n    <div>\n      <BoardWrapper>\n        <Tiles\n          isGameFinished={isGameFinished}\n          board={board}\n          placeMove={placeMove}\n        />\n      </BoardWrapper>\n      <div className=\"Message\">\n        {X_WON && \"You won!\"}\n        {O_WON && \"Computer won!\"}\n        {DRAW && \"It's a draw!\"}\n        {ERROR && \"Error occurred!\"}\n        &nbsp;\n      </div>\n      <button className=\"button\" aria-label=\"New Game\" onClick={newGame}>\n        New Game\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Board } from \"./containers/board/Board\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport thunkMiddleware from \"redux-thunk\";\nimport boardReducer from \"./containers/board/boardSlice\";\n\nexport default configureStore({\n  reducer: {\n    board: boardReducer,\n  },\n  middleware: [thunkMiddleware],\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}